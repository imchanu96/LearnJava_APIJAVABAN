
public class Svn설명서1 {

	/*
	 @형상관리란?
	 시스템 형상 요소의 변경을 관리하는 것
	 변경의 과정/실현 상황을 기록.보고, 요건 충족 사실을 검증하는 것
	 또는 그 과정
	 
	 @SVN
	 팀 프로젝트를 진행하게 되면 형상관리를 위하여 필수적으로 사용되는
	 형상관리 툴의 한 종류
	 
	 - 팀 프로젝트 수정 시 내용을 팀에 알리고 
	 수정 코드를 전달하는 물리적으로 전달하는 비생산적 구조를 개선함
	 - 위의 형태를 개선한 것이 SVN이라는 소스 관리 툴이다.
	 
	 @원리
	 1. 공통의 Repository(저장소)에 소스를 공유함
	 2. 최신 소스를 다운로드 받고 수정 후 업로드 하는 원리
	 
	 주요 명령어
	 update : 최신 소스로 갱신
	 commit : 수정한 소스 등록
	 
	 
	 Conflict : 충돌 문제
	 서로 주고 받는 과정에 모순(잘못된 버전 관리 툴 사용)으로 발생
	 소스관리 도구의 수행 순서(단계)를 잘 이행하여야 충돌 문제가 발생하지 않는다.
	 
	 원격 저장소와 로컬 양쪽에서 파일의 동일한 부분을 변경한 경우에 발생한다.
	 이 경우 두 곳에서의 변경 내용 중 어느 쪽을 우선해서 저장할 것인지
	 자동으로 판단 할 수 없기 때문에 총돌이 발생한다.
	 
	 충돌이 발생한 경우 svn(다른 것 전부)에서 직접 수정해 주어야 한다.
	 
	 @프로젝트가 없는 경우
	 저장소에서 체크아웃 -> 파일 CRUD -> sync with repository
	 -> commit
	 
	 @프로젝트가 존재하는 경우
	 기존 파일 존재 -> 업데이트 -> 새로운 작업CRUD 수행 -> sync with repository
	 -> commit
	 
	 @충돌이 난 경우 
	 업데이트 -> 서로의 내용들 합병 -> marker 제거 -> sync with repository
	 -> commit
	 
	 
	 history : 각 소스코드의 commit 내용들을 확인 가능함
	 리버전(버전)들을 파악 가능 
	 (해당 프로젝트 우클릭 -> team -> show history로 확인 가능)
	 
	 
	 
	 
	 
	 */
}
